To implement multi-currency and multi-language support in a Django project, you can leverage Django's built-in internationalization (i18n) and localization (l10n) features, along with additional tools for handling currencies. Here's a concise guide:

1. Multi-Language Support
Django provides robust tools for internationalization and localization. Here's how to set it up:
Steps:


Enable i18n in settings.py:
PythonMIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Other middleware...
]

LANGUAGES = [
    ('en', 'English'),
    ('es', 'Spanish'),
    ('fr', 'French'),
    # Add more languages as needed
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',  # Directory for translation files
]



Mark Translatable Strings:
Use gettext or gettext_lazy to mark strings for translation:
Pythonfrom django.utils.translation import gettext_lazy as _

class Product(models.Model):
    name = models.CharField(max_length=100, verbose_name=_("Product Name"))



Generate and Compile Translation Files:

Extract strings: django-admin makemessages -l <language_code>
Edit .po files in the locale directory.
Compile translations: django-admin compilemessages



Set Language Dynamically:
Use django.utils.translation.activate() to switch languages dynamically:
Pythonfrom django.utils.translation import activate

def set_language(request):
    user_language = 'es'  # Example: Spanish
    activate(user_language)




2. Multi-Currency Support
For multi-currency, you can use libraries like django-money or handle it manually.
Option 1: Using django-money


Install the Library:
Bashpip install django-money



Add Currency Fields:
Pythonfrom djmoney.models.fields import MoneyField

class Product(models.Model):
    price = MoneyField(max_digits=10, decimal_places=2, default_currency='USD')



Currency Conversion:
Use APIs like Fixer.io or Open Exchange Rates to convert currencies dynamically.


Option 2: Manual Implementation


Store Prices in Base Currency:
Store all prices in a default currency (e.g., USD).


Add Currency Conversion Logic:
Fetch exchange rates from an API and convert prices dynamically:
Pythonimport requests

def convert_currency(amount, from_currency, to_currency):
    response = requests.get(f"https://api.exchangerate-api.com/v4/latest/{from_currency}")
    rates = response.json().get('rates', {})
    return amount * rates.get(to_currency, 1)



Display Prices in Templates:
Format prices using Django's localization tools:
Pythonfrom django.utils.formats import localize

def display_price(price):
    return localize(price)




3. Combining Multi-Language and Multi-Currency

Use session or cookies to store the user's preferred language and currency.
Dynamically adjust both language and currency based on user preferences:Pythonfrom django.utils.translation import activate

def set_preferences(request):
    user_language = request.GET.get('lang', 'en')
    user_currency = request.GET.get('currency', 'USD')

    activate(user_language)
    request.session['currency'] = user_currency




By combining Django's i18n features with a library like django-money or a custom currency conversion solution, you can create a seamless multi-language and multi-currency experience for your users.
